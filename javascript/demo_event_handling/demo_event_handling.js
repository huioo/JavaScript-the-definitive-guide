/**
 * 事件处理
 * 
 * 客户端JavaScript是异步事件驱动编程模型。在这种程序设计风格下，当文档、浏览器、元素或与之相关的对象发生某些有趣的事情时，Web浏览器就会产生事件（event）。
 * 
 * 事件类型（event type）是一个用来说明发生什么类型事件的字符串。例如，“mouseover”表示用户移开鼠标，“keydown”表示键盘上某个键被按下，而“load”表示文档（或
 * 某个其他资源）从网络上加载完毕。由于事件类型只是一个字符串，因此实际上有时称之为事件名字（event name），我们用这个名字来标识所谈论的特定类型的事件。
 * 
 * 事件目标（event target）是发生的事件或与之相关的对象。当讲事件时，我们必须同时指明类型和目标。例如，window上的load事件或<button>元素的click事件。
 * 
 * 事件处理程序（event handler）或事件监听程序（event listener）是处理或响应事件的函数。（包括HTML5规范在内的一些资料基于它们注册的方式从技术上区分处理程序
 * （handler）和监听程序（listener），但本书视这两个技术术语为同义词。）应用程序通过指明事件类型和事件目标，在Web浏览器中注册它们的事件处理程序函数。当在特定
 * 的目标上发生特定类型的事件时，浏览器会调用对应的处理程序。
 * 当对象上注册的事件处理程序被调用时，我们有时会说浏览器“触发”（fire、trigger）和“派发”（dispatch）了事件。
 * 
 * 事件对象（event object）是与特定事件相关且包含有关该事件详细信息的对象。事件对象作为参数传递给事件处理程序函数（不包括IE 8及之前版本，在这些浏览器中有时仅
 * 能通过全局变量event才能得到）。
 * 所有的事件对象都有用来指定事件类型的type属性和指定事件目标的target属性。（在IE 8及之前版本中用srcElement而非target。）每个事件类型都为其相关事件对象定义
 * 一组属性。例如，鼠标事件的相关对象会包含鼠标指针的坐标，而键盘事件的相关对象会包含按下的键和辅助键的详细信息。
 * 许多事件类型仅定义了像type和target这样少量的标准属性，就无法获取许多其他有用的信息。对于这些事件而言，只是事件简单地发生，无法得到事件的详细信息。
 * 
 * 事件传播（event propagation）是浏览器决定哪个对象触发其事件处理程序的过程。对于单个对象的特定事件（比如window对象的load事件），必须是不能传播的。
 * 当文档元素上发生某个类型的事件时，然而，它们会在文档树上向上传播或“冒泡”（bubble）。如果用户移动鼠标指针到超链接上，在定义这个链接的<a>元素上首先会触发
 * mousemove事件，然后是在容器元素上触发这个事件，也许是<p>元素、<div>元素或Document对象本身。有时，在Document或其他容器元素上注册单个事件处理程序比在每个
 * 独立的目标元素上都注册处理程序要更方便。
 * 事件处理程序能通过调用方法或设置事件对象属性来阻止事件传播，这样它就能停止冒泡并且将无法在容器元素上触发处理程序。
 * 
 * 事件传播的另外一个形式称为事件捕获（event capturing），在容器元素上注册的特定处理程序有机会在事件传播到真实目标之前拦截（或“捕获”）它。
 * IE 8及之前的版本不支持事件捕获，所以不常用它。但是，当处理鼠标拖放事件时，捕获或“夺取”鼠标事件的能力是必需的。
 * 
 * 一些事件有与之相关的默认操作。例如，当超链接click事件时，浏览器的默认是按照链接加载新页面。事件处理程序可以通过返回一个适当的值、调用事件对象的某个方法或
 * 设置事件对象的某个属性来阻止默认操作的发生。这有时被称为“取消”事件。
 */




/**
 * 事件类型
 * 
 * 
 */

/**
 * 传统事件类型
 * 
 * 1. 表单事件
 *    - 提交表单 <form> 元素触发submit事件
 *    - 重置表单 <form> 元素触发reset事件
 *    - 用户和类按钮表单元素（包括单选按钮和复选框）交互时，它们会发生 click 事件
 *    - 用户输入文字、选择选项或选择复选框来改变相应表单元素状态时，这些通常维护某种状态的表单元素会触发 change 事件
 *    - 文本输入域，只有用户和表单元素完成交互并通过Tab键或单击的方式移动焦点到其他元素上时，才会触发change事件。
 *    - 响应通过键盘改变焦点的表单元素在得到和失去焦点时会分别触发 focus 和 blur 事件。
 *    通过事件处理程序能取消submit和reset事件的默认操作，某些click事件也是如此。focus和blur事件不会冒泡，但其他所有表单事件都可以。IE定义了
 *    focusin和focusout事件可以冒泡，它们可以用于替代focus和blur事件。jQuery库为不支持focusin和focusout事件的浏览器模拟了这两个事件，同时
 *    3级DOM事件规范也正在标准它们。
 *    无论用户何时输入文字（通过键盘或剪切和粘贴）到 <textarea> 和其他文本输入表单元素，除IE外的浏览器都会触发input事件。不像change事件，每次
 *    文字插入都会触发input事件。遗憾的是，input事件的事件对象没有指定输入文本的内容。
 * 
 * 2. Window事件
 *    Window事件是指事件的发生与浏览器窗口本身而非窗口中显示的任何特定文档内容相关。但是，这些事件中有一些会和文档元素上发生的事件同名。
 *    - load事件。当文档和其所有外部资源（比如图片）完全加载并显示给用户时就会触发它。DOMContentLoaded和readystatechange是load事件的替代方案，
 *      当文档和其元素为操作准备就绪，但外部资源完全加载完毕之前，浏览器就会尽早触发它们。
 *    - unload事件。和load事件相对，当用户离开当前文档转向其他文档时会触发。unload事件处理程序可以用于保存用户的状态，但它不能用于取消用户转向
 *      其他地方。
 *    - beforeunload事件。和unload事件类似，但它能提供询问用户是否确定离开当前页面的机会。如果beforeunload的处理程序返回字符串，那么在新页面加
 *      载之前，字符串会出现在展示给用户确认的对话框上，这样用户将有机会取消其跳转而留在当前页上。
 *    - Window对象的onerror属性有点像事件处理程序，当JavaScript出错时会触发它。但是，它不是真正的事件处理程序，因为它能用不同的参数来调用。
 *    - focus和blur事件。这两个事件也能用作Window事件，当浏览器窗口从操作系统中得到或失去键盘焦点时就会触发它们。
 *    - resize事件。用户调整窗口大小时触发。传递给resize事件处理程序的事件对象是一个非常普通的Event对象，它没有指定调整大小的详细信息属性，但可以
 *      通过15.8节介绍的技术来确定新窗口的尺寸。
 *    - scroll事件。用户滚动窗口时触发。scroll事件也能在任何可以滚动的文档元素上触发，比如那些设置CSS的overflow属性的元素。传递给scroll事件处理
 *      程序的事件对象是一个非常普通的Event对象，它没有指定发生滚动的详细信息属性，但可以通过15.8节介绍的技术来确定新窗口的滚动条的位置。
 * 
 * 3. 像<img>元素这样的单个文档元素，也能为load和error事件注册处理程序。当外部资源（例如图片）完全加载或发生阻止加载的错误时就会触发它们。某些浏
 *    览器也支持abort事件（HTML5将其标准化），当图片（或其他网络资源）因为用户停止加载进程而导致失败就会触发它。
 *  
 * 4. 鼠标事件
 *    当用户在文档上移动或单击鼠标时都会产生鼠标事件。这些事件在鼠标指针所对应的最深嵌套元素上触发，但它们会冒泡直到文档最顶层。传递给鼠标事件处理
 *    程序的事件对象有属性集，它们描述了当事件发生时鼠标的位置和案件状态，也指明当时是否有任何辅助键按下。
 *    clientX 和 clientY属性指定了
 *    - 
 */

